// source: pancake.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.pancake.baker.BakeRequest', null, global);
goog.exportSymbol('proto.pancake.baker.BakeResponse', null, global);
goog.exportSymbol('proto.pancake.baker.Pancake', null, global);
goog.exportSymbol('proto.pancake.baker.Pancake.Menu', null, global);
goog.exportSymbol('proto.pancake.baker.Report', null, global);
goog.exportSymbol('proto.pancake.baker.Report.BakeCount', null, global);
goog.exportSymbol('proto.pancake.baker.ReportRequest', null, global);
goog.exportSymbol('proto.pancake.baker.ReportResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.Pancake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pancake.baker.Pancake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.Pancake.displayName = 'proto.pancake.baker.Pancake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.Report = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pancake.baker.Report.repeatedFields_, null);
};
goog.inherits(proto.pancake.baker.Report, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.Report.displayName = 'proto.pancake.baker.Report';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.Report.BakeCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pancake.baker.Report.BakeCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.Report.BakeCount.displayName = 'proto.pancake.baker.Report.BakeCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.BakeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pancake.baker.BakeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.BakeRequest.displayName = 'proto.pancake.baker.BakeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.BakeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pancake.baker.BakeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.BakeResponse.displayName = 'proto.pancake.baker.BakeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.ReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pancake.baker.ReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.ReportRequest.displayName = 'proto.pancake.baker.ReportRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pancake.baker.ReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pancake.baker.ReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pancake.baker.ReportResponse.displayName = 'proto.pancake.baker.ReportResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.Pancake.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.Pancake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.Pancake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.Pancake.toObject = function(includeInstance, msg) {
  var f, obj = {
    chefName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    menu: jspb.Message.getFieldWithDefault(msg, 2, 0),
    technicalScore: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.Pancake}
 */
proto.pancake.baker.Pancake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.Pancake;
  return proto.pancake.baker.Pancake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.Pancake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.Pancake}
 */
proto.pancake.baker.Pancake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChefName(value);
      break;
    case 2:
      var value = /** @type {!proto.pancake.baker.Pancake.Menu} */ (reader.readEnum());
      msg.setMenu(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTechnicalScore(value);
      break;
    case 15:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.Pancake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.Pancake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.Pancake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.Pancake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChefName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMenu();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTechnicalScore();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.pancake.baker.Pancake.Menu = {
  UNKNOWN: 0,
  CLASSIC: 1,
  BANANA_AND_WHIP: 2,
  BACON_AND_CHEESE: 3,
  MIX_BERRY: 4,
  BAKED_MARSHMALLOW: 5,
  SPICY_CURRY: 6
};

/**
 * optional string chef_name = 1;
 * @return {string}
 */
proto.pancake.baker.Pancake.prototype.getChefName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pancake.baker.Pancake} returns this
 */
proto.pancake.baker.Pancake.prototype.setChefName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Menu menu = 2;
 * @return {!proto.pancake.baker.Pancake.Menu}
 */
proto.pancake.baker.Pancake.prototype.getMenu = function() {
  return /** @type {!proto.pancake.baker.Pancake.Menu} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.pancake.baker.Pancake.Menu} value
 * @return {!proto.pancake.baker.Pancake} returns this
 */
proto.pancake.baker.Pancake.prototype.setMenu = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float technical_score = 3;
 * @return {number}
 */
proto.pancake.baker.Pancake.prototype.getTechnicalScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pancake.baker.Pancake} returns this
 */
proto.pancake.baker.Pancake.prototype.setTechnicalScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp create_time = 15;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.pancake.baker.Pancake.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 15));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.pancake.baker.Pancake} returns this
*/
proto.pancake.baker.Pancake.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pancake.baker.Pancake} returns this
 */
proto.pancake.baker.Pancake.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pancake.baker.Pancake.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pancake.baker.Report.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.Report.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.Report.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.Report} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.Report.toObject = function(includeInstance, msg) {
  var f, obj = {
    bakeCountsList: jspb.Message.toObjectList(msg.getBakeCountsList(),
    proto.pancake.baker.Report.BakeCount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.Report}
 */
proto.pancake.baker.Report.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.Report;
  return proto.pancake.baker.Report.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.Report} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.Report}
 */
proto.pancake.baker.Report.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.pancake.baker.Report.BakeCount;
      reader.readMessage(value,proto.pancake.baker.Report.BakeCount.deserializeBinaryFromReader);
      msg.addBakeCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.Report.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.Report.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.Report} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.Report.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBakeCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pancake.baker.Report.BakeCount.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.Report.BakeCount.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.Report.BakeCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.Report.BakeCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.Report.BakeCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    menu: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.Report.BakeCount}
 */
proto.pancake.baker.Report.BakeCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.Report.BakeCount;
  return proto.pancake.baker.Report.BakeCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.Report.BakeCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.Report.BakeCount}
 */
proto.pancake.baker.Report.BakeCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pancake.baker.Pancake.Menu} */ (reader.readEnum());
      msg.setMenu(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.Report.BakeCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.Report.BakeCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.Report.BakeCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.Report.BakeCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMenu();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional Pancake.Menu menu = 1;
 * @return {!proto.pancake.baker.Pancake.Menu}
 */
proto.pancake.baker.Report.BakeCount.prototype.getMenu = function() {
  return /** @type {!proto.pancake.baker.Pancake.Menu} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pancake.baker.Pancake.Menu} value
 * @return {!proto.pancake.baker.Report.BakeCount} returns this
 */
proto.pancake.baker.Report.BakeCount.prototype.setMenu = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.pancake.baker.Report.BakeCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pancake.baker.Report.BakeCount} returns this
 */
proto.pancake.baker.Report.BakeCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated BakeCount bake_counts = 3;
 * @return {!Array<!proto.pancake.baker.Report.BakeCount>}
 */
proto.pancake.baker.Report.prototype.getBakeCountsList = function() {
  return /** @type{!Array<!proto.pancake.baker.Report.BakeCount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pancake.baker.Report.BakeCount, 3));
};


/**
 * @param {!Array<!proto.pancake.baker.Report.BakeCount>} value
 * @return {!proto.pancake.baker.Report} returns this
*/
proto.pancake.baker.Report.prototype.setBakeCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pancake.baker.Report.BakeCount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pancake.baker.Report.BakeCount}
 */
proto.pancake.baker.Report.prototype.addBakeCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pancake.baker.Report.BakeCount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pancake.baker.Report} returns this
 */
proto.pancake.baker.Report.prototype.clearBakeCountsList = function() {
  return this.setBakeCountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.BakeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.BakeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.BakeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.BakeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    menu: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.BakeRequest}
 */
proto.pancake.baker.BakeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.BakeRequest;
  return proto.pancake.baker.BakeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.BakeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.BakeRequest}
 */
proto.pancake.baker.BakeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.pancake.baker.Pancake.Menu} */ (reader.readEnum());
      msg.setMenu(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.BakeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.BakeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.BakeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.BakeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMenu();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Pancake.Menu menu = 1;
 * @return {!proto.pancake.baker.Pancake.Menu}
 */
proto.pancake.baker.BakeRequest.prototype.getMenu = function() {
  return /** @type {!proto.pancake.baker.Pancake.Menu} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.pancake.baker.Pancake.Menu} value
 * @return {!proto.pancake.baker.BakeRequest} returns this
 */
proto.pancake.baker.BakeRequest.prototype.setMenu = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.BakeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.BakeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.BakeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.BakeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pancake: (f = msg.getPancake()) && proto.pancake.baker.Pancake.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.BakeResponse}
 */
proto.pancake.baker.BakeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.BakeResponse;
  return proto.pancake.baker.BakeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.BakeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.BakeResponse}
 */
proto.pancake.baker.BakeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pancake.baker.Pancake;
      reader.readMessage(value,proto.pancake.baker.Pancake.deserializeBinaryFromReader);
      msg.setPancake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.BakeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.BakeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.BakeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.BakeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPancake();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pancake.baker.Pancake.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pancake pancake = 1;
 * @return {?proto.pancake.baker.Pancake}
 */
proto.pancake.baker.BakeResponse.prototype.getPancake = function() {
  return /** @type{?proto.pancake.baker.Pancake} */ (
    jspb.Message.getWrapperField(this, proto.pancake.baker.Pancake, 1));
};


/**
 * @param {?proto.pancake.baker.Pancake|undefined} value
 * @return {!proto.pancake.baker.BakeResponse} returns this
*/
proto.pancake.baker.BakeResponse.prototype.setPancake = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pancake.baker.BakeResponse} returns this
 */
proto.pancake.baker.BakeResponse.prototype.clearPancake = function() {
  return this.setPancake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pancake.baker.BakeResponse.prototype.hasPancake = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.ReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.ReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.ReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.ReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.ReportRequest}
 */
proto.pancake.baker.ReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.ReportRequest;
  return proto.pancake.baker.ReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.ReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.ReportRequest}
 */
proto.pancake.baker.ReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.ReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.ReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.ReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.ReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pancake.baker.ReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pancake.baker.ReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pancake.baker.ReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.ReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    report: (f = msg.getReport()) && proto.pancake.baker.Report.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pancake.baker.ReportResponse}
 */
proto.pancake.baker.ReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pancake.baker.ReportResponse;
  return proto.pancake.baker.ReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pancake.baker.ReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pancake.baker.ReportResponse}
 */
proto.pancake.baker.ReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pancake.baker.Report;
      reader.readMessage(value,proto.pancake.baker.Report.deserializeBinaryFromReader);
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pancake.baker.ReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pancake.baker.ReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pancake.baker.ReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pancake.baker.ReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReport();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pancake.baker.Report.serializeBinaryToWriter
    );
  }
};


/**
 * optional Report report = 1;
 * @return {?proto.pancake.baker.Report}
 */
proto.pancake.baker.ReportResponse.prototype.getReport = function() {
  return /** @type{?proto.pancake.baker.Report} */ (
    jspb.Message.getWrapperField(this, proto.pancake.baker.Report, 1));
};


/**
 * @param {?proto.pancake.baker.Report|undefined} value
 * @return {!proto.pancake.baker.ReportResponse} returns this
*/
proto.pancake.baker.ReportResponse.prototype.setReport = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pancake.baker.ReportResponse} returns this
 */
proto.pancake.baker.ReportResponse.prototype.clearReport = function() {
  return this.setReport(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pancake.baker.ReportResponse.prototype.hasReport = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.pancake.baker);
